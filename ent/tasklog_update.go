// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-job/ent/predicate"
	"github.com/suyuan32/simple-admin-job/ent/task"
	"github.com/suyuan32/simple-admin-job/ent/tasklog"
)

// TaskLogUpdate is the builder for updating TaskLog entities.
type TaskLogUpdate struct {
	config
	hooks    []Hook
	mutation *TaskLogMutation
}

// Where appends a list predicates to the TaskLogUpdate builder.
func (_u *TaskLogUpdate) Where(ps ...predicate.TaskLog) *TaskLogUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetFinishedAt sets the "finished_at" field.
func (_u *TaskLogUpdate) SetFinishedAt(v time.Time) *TaskLogUpdate {
	_u.mutation.SetFinishedAt(v)
	return _u
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (_u *TaskLogUpdate) SetNillableFinishedAt(v *time.Time) *TaskLogUpdate {
	if v != nil {
		_u.SetFinishedAt(*v)
	}
	return _u
}

// SetResult sets the "result" field.
func (_u *TaskLogUpdate) SetResult(v uint8) *TaskLogUpdate {
	_u.mutation.ResetResult()
	_u.mutation.SetResult(v)
	return _u
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (_u *TaskLogUpdate) SetNillableResult(v *uint8) *TaskLogUpdate {
	if v != nil {
		_u.SetResult(*v)
	}
	return _u
}

// AddResult adds value to the "result" field.
func (_u *TaskLogUpdate) AddResult(v int8) *TaskLogUpdate {
	_u.mutation.AddResult(v)
	return _u
}

// SetTasksID sets the "tasks" edge to the Task entity by ID.
func (_u *TaskLogUpdate) SetTasksID(id uint64) *TaskLogUpdate {
	_u.mutation.SetTasksID(id)
	return _u
}

// SetNillableTasksID sets the "tasks" edge to the Task entity by ID if the given value is not nil.
func (_u *TaskLogUpdate) SetNillableTasksID(id *uint64) *TaskLogUpdate {
	if id != nil {
		_u = _u.SetTasksID(*id)
	}
	return _u
}

// SetTasks sets the "tasks" edge to the Task entity.
func (_u *TaskLogUpdate) SetTasks(v *Task) *TaskLogUpdate {
	return _u.SetTasksID(v.ID)
}

// Mutation returns the TaskLogMutation object of the builder.
func (_u *TaskLogUpdate) Mutation() *TaskLogMutation {
	return _u.mutation
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (_u *TaskLogUpdate) ClearTasks() *TaskLogUpdate {
	_u.mutation.ClearTasks()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TaskLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TaskLogUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TaskLogUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TaskLogUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *TaskLogUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tasklog.Table, tasklog.Columns, sqlgraph.NewFieldSpec(tasklog.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.FinishedAt(); ok {
		_spec.SetField(tasklog.FieldFinishedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Result(); ok {
		_spec.SetField(tasklog.FieldResult, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedResult(); ok {
		_spec.AddField(tasklog.FieldResult, field.TypeUint8, value)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasklog.TasksTable,
			Columns: []string{tasklog.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasklog.TasksTable,
			Columns: []string{tasklog.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasklog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TaskLogUpdateOne is the builder for updating a single TaskLog entity.
type TaskLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskLogMutation
}

// SetFinishedAt sets the "finished_at" field.
func (_u *TaskLogUpdateOne) SetFinishedAt(v time.Time) *TaskLogUpdateOne {
	_u.mutation.SetFinishedAt(v)
	return _u
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (_u *TaskLogUpdateOne) SetNillableFinishedAt(v *time.Time) *TaskLogUpdateOne {
	if v != nil {
		_u.SetFinishedAt(*v)
	}
	return _u
}

// SetResult sets the "result" field.
func (_u *TaskLogUpdateOne) SetResult(v uint8) *TaskLogUpdateOne {
	_u.mutation.ResetResult()
	_u.mutation.SetResult(v)
	return _u
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (_u *TaskLogUpdateOne) SetNillableResult(v *uint8) *TaskLogUpdateOne {
	if v != nil {
		_u.SetResult(*v)
	}
	return _u
}

// AddResult adds value to the "result" field.
func (_u *TaskLogUpdateOne) AddResult(v int8) *TaskLogUpdateOne {
	_u.mutation.AddResult(v)
	return _u
}

// SetTasksID sets the "tasks" edge to the Task entity by ID.
func (_u *TaskLogUpdateOne) SetTasksID(id uint64) *TaskLogUpdateOne {
	_u.mutation.SetTasksID(id)
	return _u
}

// SetNillableTasksID sets the "tasks" edge to the Task entity by ID if the given value is not nil.
func (_u *TaskLogUpdateOne) SetNillableTasksID(id *uint64) *TaskLogUpdateOne {
	if id != nil {
		_u = _u.SetTasksID(*id)
	}
	return _u
}

// SetTasks sets the "tasks" edge to the Task entity.
func (_u *TaskLogUpdateOne) SetTasks(v *Task) *TaskLogUpdateOne {
	return _u.SetTasksID(v.ID)
}

// Mutation returns the TaskLogMutation object of the builder.
func (_u *TaskLogUpdateOne) Mutation() *TaskLogMutation {
	return _u.mutation
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (_u *TaskLogUpdateOne) ClearTasks() *TaskLogUpdateOne {
	_u.mutation.ClearTasks()
	return _u
}

// Where appends a list predicates to the TaskLogUpdate builder.
func (_u *TaskLogUpdateOne) Where(ps ...predicate.TaskLog) *TaskLogUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TaskLogUpdateOne) Select(field string, fields ...string) *TaskLogUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TaskLog entity.
func (_u *TaskLogUpdateOne) Save(ctx context.Context) (*TaskLog, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TaskLogUpdateOne) SaveX(ctx context.Context) *TaskLog {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TaskLogUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TaskLogUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *TaskLogUpdateOne) sqlSave(ctx context.Context) (_node *TaskLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(tasklog.Table, tasklog.Columns, sqlgraph.NewFieldSpec(tasklog.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tasklog.FieldID)
		for _, f := range fields {
			if !tasklog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tasklog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.FinishedAt(); ok {
		_spec.SetField(tasklog.FieldFinishedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Result(); ok {
		_spec.SetField(tasklog.FieldResult, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedResult(); ok {
		_spec.AddField(tasklog.FieldResult, field.TypeUint8, value)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasklog.TasksTable,
			Columns: []string{tasklog.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasklog.TasksTable,
			Columns: []string{tasklog.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskLog{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasklog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
