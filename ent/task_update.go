// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Tricitrus/tricitrus-admin-job/ent/predicate"
	"github.com/Tricitrus/tricitrus-admin-job/ent/task"
	"github.com/Tricitrus/tricitrus-admin-job/ent/tasklog"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (_u *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TaskUpdate) SetUpdatedAt(v time.Time) *TaskUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *TaskUpdate) SetStatus(v uint8) *TaskUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableStatus(v *uint8) *TaskUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *TaskUpdate) AddStatus(v int8) *TaskUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *TaskUpdate) ClearStatus() *TaskUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetName sets the "name" field.
func (_u *TaskUpdate) SetName(v string) *TaskUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableName(v *string) *TaskUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetTaskGroup sets the "task_group" field.
func (_u *TaskUpdate) SetTaskGroup(v string) *TaskUpdate {
	_u.mutation.SetTaskGroup(v)
	return _u
}

// SetNillableTaskGroup sets the "task_group" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableTaskGroup(v *string) *TaskUpdate {
	if v != nil {
		_u.SetTaskGroup(*v)
	}
	return _u
}

// SetCronExpression sets the "cron_expression" field.
func (_u *TaskUpdate) SetCronExpression(v string) *TaskUpdate {
	_u.mutation.SetCronExpression(v)
	return _u
}

// SetNillableCronExpression sets the "cron_expression" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableCronExpression(v *string) *TaskUpdate {
	if v != nil {
		_u.SetCronExpression(*v)
	}
	return _u
}

// SetPattern sets the "pattern" field.
func (_u *TaskUpdate) SetPattern(v string) *TaskUpdate {
	_u.mutation.SetPattern(v)
	return _u
}

// SetNillablePattern sets the "pattern" field if the given value is not nil.
func (_u *TaskUpdate) SetNillablePattern(v *string) *TaskUpdate {
	if v != nil {
		_u.SetPattern(*v)
	}
	return _u
}

// SetPayload sets the "payload" field.
func (_u *TaskUpdate) SetPayload(v string) *TaskUpdate {
	_u.mutation.SetPayload(v)
	return _u
}

// SetNillablePayload sets the "payload" field if the given value is not nil.
func (_u *TaskUpdate) SetNillablePayload(v *string) *TaskUpdate {
	if v != nil {
		_u.SetPayload(*v)
	}
	return _u
}

// AddTaskLogIDs adds the "task_logs" edge to the TaskLog entity by IDs.
func (_u *TaskUpdate) AddTaskLogIDs(ids ...uint64) *TaskUpdate {
	_u.mutation.AddTaskLogIDs(ids...)
	return _u
}

// AddTaskLogs adds the "task_logs" edges to the TaskLog entity.
func (_u *TaskUpdate) AddTaskLogs(v ...*TaskLog) *TaskUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskLogIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (_u *TaskUpdate) Mutation() *TaskMutation {
	return _u.mutation
}

// ClearTaskLogs clears all "task_logs" edges to the TaskLog entity.
func (_u *TaskUpdate) ClearTaskLogs() *TaskUpdate {
	_u.mutation.ClearTaskLogs()
	return _u
}

// RemoveTaskLogIDs removes the "task_logs" edge to TaskLog entities by IDs.
func (_u *TaskUpdate) RemoveTaskLogIDs(ids ...uint64) *TaskUpdate {
	_u.mutation.RemoveTaskLogIDs(ids...)
	return _u
}

// RemoveTaskLogs removes "task_logs" edges to TaskLog entities.
func (_u *TaskUpdate) RemoveTaskLogs(v ...*TaskLog) *TaskUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TaskUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TaskUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TaskUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TaskUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *TaskUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(task.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(task.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.TaskGroup(); ok {
		_spec.SetField(task.FieldTaskGroup, field.TypeString, value)
	}
	if value, ok := _u.mutation.CronExpression(); ok {
		_spec.SetField(task.FieldCronExpression, field.TypeString, value)
	}
	if value, ok := _u.mutation.Pattern(); ok {
		_spec.SetField(task.FieldPattern, field.TypeString, value)
	}
	if value, ok := _u.mutation.Payload(); ok {
		_spec.SetField(task.FieldPayload, field.TypeString, value)
	}
	if _u.mutation.TaskLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskLogsTable,
			Columns: []string{task.TaskLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasklog.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTaskLogsIDs(); len(nodes) > 0 && !_u.mutation.TaskLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskLogsTable,
			Columns: []string{task.TaskLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasklog.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TaskLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskLogsTable,
			Columns: []string{task.TaskLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasklog.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TaskUpdateOne) SetUpdatedAt(v time.Time) *TaskUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *TaskUpdateOne) SetStatus(v uint8) *TaskUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableStatus(v *uint8) *TaskUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *TaskUpdateOne) AddStatus(v int8) *TaskUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *TaskUpdateOne) ClearStatus() *TaskUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetName sets the "name" field.
func (_u *TaskUpdateOne) SetName(v string) *TaskUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableName(v *string) *TaskUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetTaskGroup sets the "task_group" field.
func (_u *TaskUpdateOne) SetTaskGroup(v string) *TaskUpdateOne {
	_u.mutation.SetTaskGroup(v)
	return _u
}

// SetNillableTaskGroup sets the "task_group" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableTaskGroup(v *string) *TaskUpdateOne {
	if v != nil {
		_u.SetTaskGroup(*v)
	}
	return _u
}

// SetCronExpression sets the "cron_expression" field.
func (_u *TaskUpdateOne) SetCronExpression(v string) *TaskUpdateOne {
	_u.mutation.SetCronExpression(v)
	return _u
}

// SetNillableCronExpression sets the "cron_expression" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableCronExpression(v *string) *TaskUpdateOne {
	if v != nil {
		_u.SetCronExpression(*v)
	}
	return _u
}

// SetPattern sets the "pattern" field.
func (_u *TaskUpdateOne) SetPattern(v string) *TaskUpdateOne {
	_u.mutation.SetPattern(v)
	return _u
}

// SetNillablePattern sets the "pattern" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillablePattern(v *string) *TaskUpdateOne {
	if v != nil {
		_u.SetPattern(*v)
	}
	return _u
}

// SetPayload sets the "payload" field.
func (_u *TaskUpdateOne) SetPayload(v string) *TaskUpdateOne {
	_u.mutation.SetPayload(v)
	return _u
}

// SetNillablePayload sets the "payload" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillablePayload(v *string) *TaskUpdateOne {
	if v != nil {
		_u.SetPayload(*v)
	}
	return _u
}

// AddTaskLogIDs adds the "task_logs" edge to the TaskLog entity by IDs.
func (_u *TaskUpdateOne) AddTaskLogIDs(ids ...uint64) *TaskUpdateOne {
	_u.mutation.AddTaskLogIDs(ids...)
	return _u
}

// AddTaskLogs adds the "task_logs" edges to the TaskLog entity.
func (_u *TaskUpdateOne) AddTaskLogs(v ...*TaskLog) *TaskUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskLogIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (_u *TaskUpdateOne) Mutation() *TaskMutation {
	return _u.mutation
}

// ClearTaskLogs clears all "task_logs" edges to the TaskLog entity.
func (_u *TaskUpdateOne) ClearTaskLogs() *TaskUpdateOne {
	_u.mutation.ClearTaskLogs()
	return _u
}

// RemoveTaskLogIDs removes the "task_logs" edge to TaskLog entities by IDs.
func (_u *TaskUpdateOne) RemoveTaskLogIDs(ids ...uint64) *TaskUpdateOne {
	_u.mutation.RemoveTaskLogIDs(ids...)
	return _u
}

// RemoveTaskLogs removes "task_logs" edges to TaskLog entities.
func (_u *TaskUpdateOne) RemoveTaskLogs(v ...*TaskLog) *TaskUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskLogIDs(ids...)
}

// Where appends a list predicates to the TaskUpdate builder.
func (_u *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Task entity.
func (_u *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TaskUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(task.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(task.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.TaskGroup(); ok {
		_spec.SetField(task.FieldTaskGroup, field.TypeString, value)
	}
	if value, ok := _u.mutation.CronExpression(); ok {
		_spec.SetField(task.FieldCronExpression, field.TypeString, value)
	}
	if value, ok := _u.mutation.Pattern(); ok {
		_spec.SetField(task.FieldPattern, field.TypeString, value)
	}
	if value, ok := _u.mutation.Payload(); ok {
		_spec.SetField(task.FieldPayload, field.TypeString, value)
	}
	if _u.mutation.TaskLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskLogsTable,
			Columns: []string{task.TaskLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasklog.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTaskLogsIDs(); len(nodes) > 0 && !_u.mutation.TaskLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskLogsTable,
			Columns: []string{task.TaskLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasklog.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TaskLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskLogsTable,
			Columns: []string{task.TaskLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasklog.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
