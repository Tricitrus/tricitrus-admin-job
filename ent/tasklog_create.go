// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Tricitrus/tricitrus-admin-job/ent/task"
	"github.com/Tricitrus/tricitrus-admin-job/ent/tasklog"
)

// TaskLogCreate is the builder for creating a TaskLog entity.
type TaskLogCreate struct {
	config
	mutation *TaskLogMutation
	hooks    []Hook
}

// SetStartedAt sets the "started_at" field.
func (_c *TaskLogCreate) SetStartedAt(v time.Time) *TaskLogCreate {
	_c.mutation.SetStartedAt(v)
	return _c
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_c *TaskLogCreate) SetNillableStartedAt(v *time.Time) *TaskLogCreate {
	if v != nil {
		_c.SetStartedAt(*v)
	}
	return _c
}

// SetFinishedAt sets the "finished_at" field.
func (_c *TaskLogCreate) SetFinishedAt(v time.Time) *TaskLogCreate {
	_c.mutation.SetFinishedAt(v)
	return _c
}

// SetResult sets the "result" field.
func (_c *TaskLogCreate) SetResult(v uint8) *TaskLogCreate {
	_c.mutation.SetResult(v)
	return _c
}

// SetID sets the "id" field.
func (_c *TaskLogCreate) SetID(v uint64) *TaskLogCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetTasksID sets the "tasks" edge to the Task entity by ID.
func (_c *TaskLogCreate) SetTasksID(id uint64) *TaskLogCreate {
	_c.mutation.SetTasksID(id)
	return _c
}

// SetNillableTasksID sets the "tasks" edge to the Task entity by ID if the given value is not nil.
func (_c *TaskLogCreate) SetNillableTasksID(id *uint64) *TaskLogCreate {
	if id != nil {
		_c = _c.SetTasksID(*id)
	}
	return _c
}

// SetTasks sets the "tasks" edge to the Task entity.
func (_c *TaskLogCreate) SetTasks(v *Task) *TaskLogCreate {
	return _c.SetTasksID(v.ID)
}

// Mutation returns the TaskLogMutation object of the builder.
func (_c *TaskLogCreate) Mutation() *TaskLogMutation {
	return _c.mutation
}

// Save creates the TaskLog in the database.
func (_c *TaskLogCreate) Save(ctx context.Context) (*TaskLog, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TaskLogCreate) SaveX(ctx context.Context) *TaskLog {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TaskLogCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TaskLogCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *TaskLogCreate) defaults() {
	if _, ok := _c.mutation.StartedAt(); !ok {
		v := tasklog.DefaultStartedAt()
		_c.mutation.SetStartedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TaskLogCreate) check() error {
	if _, ok := _c.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`ent: missing required field "TaskLog.started_at"`)}
	}
	if _, ok := _c.mutation.FinishedAt(); !ok {
		return &ValidationError{Name: "finished_at", err: errors.New(`ent: missing required field "TaskLog.finished_at"`)}
	}
	if _, ok := _c.mutation.Result(); !ok {
		return &ValidationError{Name: "result", err: errors.New(`ent: missing required field "TaskLog.result"`)}
	}
	return nil
}

func (_c *TaskLogCreate) sqlSave(ctx context.Context) (*TaskLog, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TaskLogCreate) createSpec() (*TaskLog, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskLog{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(tasklog.Table, sqlgraph.NewFieldSpec(tasklog.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.StartedAt(); ok {
		_spec.SetField(tasklog.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := _c.mutation.FinishedAt(); ok {
		_spec.SetField(tasklog.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = value
	}
	if value, ok := _c.mutation.Result(); ok {
		_spec.SetField(tasklog.FieldResult, field.TypeUint8, value)
		_node.Result = value
	}
	if nodes := _c.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasklog.TasksTable,
			Columns: []string{tasklog.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.task_task_logs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskLogCreateBulk is the builder for creating many TaskLog entities in bulk.
type TaskLogCreateBulk struct {
	config
	err      error
	builders []*TaskLogCreate
}

// Save creates the TaskLog entities in the database.
func (_c *TaskLogCreateBulk) Save(ctx context.Context) ([]*TaskLog, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*TaskLog, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TaskLogCreateBulk) SaveX(ctx context.Context) []*TaskLog {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TaskLogCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TaskLogCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
